self.addEventListener("install",()=>{console.log("sw installed"),self.skipWaiting()}),self.addEventListener("activate",a=>{console.log("sw activated"),a.waitUntil(self.clients.claim())}),self.addEventListener("message",a=>{"init"===a.data&&initPort(a.ports[0])});let port;function initPort(a){port=a,port.onmessage=a=>{const{data:b}=a;if("taskResult"===b.type){const{taskId:a,result:c}=b,d=tasks.get(a);d(c),tasks.delete(a)}}}self.addEventListener("fetch",a=>{const b=a.request,c=b.url.match(/document(\d+)_(\d+)_(\d+)\.(mp3|mp4)$/);if(c){const[,d,e,f,g]=c,h=b.headers.get("range");let[,i,j]=h.match(/bytes=(\d+)-(\d*)/);i=+i,j=+j||Math.min(f,i+262144)-1;const k=j-i+1,l=loadDocumentRange(d,e,i,k),m=new Response(l,{status:206,headers:{"Content-Type":"mp4"===g?"video/mp4":"audio/mp3","Content-Length":k,"Content-Range":`bytes ${i}-${j}/${f}`}});return a.respondWith(m)}});let taskId=0;const tasks=new Map;function loadDocumentRange(a,b,c,d){function e(c,d){const e={taskId:++taskId,task:"loadDocumentRange",messageId:a,documentId:b,offset:c,limit:d};return new Promise(a=>{tasks.set(e.taskId,a),port.postMessage(e)})}return new ReadableStream({start(a){e(c,d).then(({bytes:b})=>a.enqueue(b)).finally(()=>a.close())}})}
